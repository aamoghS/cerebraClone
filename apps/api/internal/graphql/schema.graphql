enum PortalType {
  HACKATHON
  CLUB
  ADMIN
}

enum MembershipStatus {
  ACTIVE
  EXPIRED
  PENDING
  CANCELLED
}

enum CheckInStatus {
  CHECKED_IN
  NOT_CHECKED_IN
}

type User {
  id: ID!
  email: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type HackathonRegistration {
  id: ID!
  email: String!
  qrCode: String!
  qrCodeData: String!
  checkInStatus: CheckInStatus!
  checkedInAt: String
  checkedInBy: User
  registeredAt: String!
}

type HackathonStats {
  totalRegistrations: Int!
  totalCheckedIn: Int!
  pendingCheckIns: Int!
}

type ClubMembership {
  id: ID!
  user: User!
  status: MembershipStatus!
  memberSince: String!
  expiresAt: String!
  lastPaymentDate: String
  autoRenew: Boolean!
}

type ClubEvent {
  id: ID!
  title: String!
  description: String
  date: String!
  endDate: String
  location: String
  imageUrl: String
  capacity: Int
  rsvps: Int!
  rsvpList: [User!]!
  hasUserRsvped: Boolean!
  isFull: Boolean!
  isPast: Boolean!
  requiresRsvp: Boolean!
  createdAt: String!
  updatedAt: String!
}

type EventRsvp {
  id: ID!
  event: ClubEvent!
  user: User!
  rsvpedAt: String!
}

type RegistrationResponse {
  success: Boolean!
  message: String
  registration: HackathonRegistration
}

type MembershipResponse {
  success: Boolean!
  message: String
  membership: ClubMembership
}

type CheckInResult {
  success: Boolean!
  message: String!
  registration: HackathonRegistration
}

type RsvpResponse {
  success: Boolean!
  message: String
  rsvp: EventRsvp
}

input EventFilterInput {
  upcoming: Boolean
  past: Boolean
  userRsvped: Boolean
}

type Query {
  me: User
  
  checkHackathonRegistration(email: String!): HackathonRegistration
  myHackathonQRCode: HackathonRegistration
  hackathonRegistrations(
    limit: Int
    offset: Int
    checkInStatus: CheckInStatus
    search: String
  ): [HackathonRegistration!]!
  hackathonStats: HackathonStats!
  verifyQRCode(qrCodeData: String!): HackathonRegistration
  
  myMembership: ClubMembership
  checkMembershipByEmail(email: String!): ClubMembership
  clubEvents(filter: EventFilterInput, limit: Int, offset: Int): [ClubEvent!]!
  upcomingEvents: [ClubEvent!]!
  myRsvps: [EventRsvp!]!
  eventDetails(eventId: ID!): ClubEvent
  allMemberships(
    status: MembershipStatus
    limit: Int
    offset: Int
    search: String
  ): [ClubMembership!]!
}

type Mutation {
  registerForHackathon(email: String!): RegistrationResponse!
  checkInParticipant(qrCodeData: String!): CheckInResult!
  manualCheckIn(email: String!): CheckInResult!
  undoCheckIn(registrationId: ID!): CheckInResult!
  deleteRegistration(registrationId: ID!): Boolean!
  
  requestMembership(email: String!, name: String!): MembershipResponse!
  renewMembership: MembershipResponse!
  cancelMembership: MembershipResponse!
  rsvpToEvent(eventId: ID!): RsvpResponse!
  cancelEventRsvp(eventId: ID!): RsvpResponse!
  
  createEvent(
    title: String!
    description: String
    date: String!
    endDate: String
    location: String
    imageUrl: String
    capacity: Int
    requiresRsvp: Boolean
  ): ClubEvent!
  updateEvent(
    eventId: ID!
    title: String
    description: String
    date: String
    endDate: String
    location: String
    imageUrl: String
    capacity: Int
    requiresRsvp: Boolean
  ): ClubEvent!
  deleteEvent(eventId: ID!): Boolean!
  
  approveMembership(membershipId: ID!): MembershipResponse!
  rejectMembership(membershipId: ID!): MembershipResponse!
  expireMembership(membershipId: ID!): MembershipResponse!
  extendMembership(membershipId: ID!, expiresAt: String!): MembershipResponse!
}

type Subscription {
  hackathonCheckInUpdated: HackathonRegistration!
  eventRsvpUpdated(eventId: ID!): ClubEvent!
  newEventCreated: ClubEvent!
}
